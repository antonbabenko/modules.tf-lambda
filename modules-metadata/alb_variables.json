{
  "alb_is_internal": {
    "default": false,
    "description": "Boolean determining if the ALB is internal or externally facing."
  },
  "alb_name": {
    "description": "The name of the ALB as will show in the AWS EC2 ELB console."
  },
  "alb_protocols": {
    "default": [
      "HTTP"
    ],
    "description": "The protocols the ALB accepts. e.g.: [\"HTTP\"]",
    "type": "list"
  },
  "alb_security_groups": {
    "description": "The security groups with which we associate the ALB. e.g. [\"sg-edcd9784\",\"sg-edcd9785\"]",
    "type": "list"
  },
  "backend_port": {
    "default": 80,
    "description": "The port the service on the EC2 instances listen on."
  },
  "backend_protocol": {
    "default": "HTTP",
    "description": "The protocol the backend service speaks. Options: HTTP, HTTPS, TCP, SSL (secure tcp)."
  },
  "bucket_policy": {
    "default": "",
    "description": "An S3 bucket policy to apply to the log bucket. If not provided, a minimal policy will be generated from other variables."
  },
  "certificate_arn": {
    "description": "The ARN of the SSL Certificate. e.g. \"arn:aws:iam::123456789012:server-certificate/ProdServerCert\""
  },
  "cookie_duration": {
    "default": 1,
    "description": "If load balancer connection stickiness is desired, set this to the duration in seconds that cookie should be valid (e.g. 300). Otherwise, if no stickiness is desired, leave the default."
  },
  "create_log_bucket": {
    "default": false,
    "description": "Create the S3 bucket (named with the log_bucket_name var) and attach a policy to allow ALB logging."
  },
  "enable_logging": {
    "default": false,
    "description": "Enable the ALB to write log entries to S3."
  },
  "force_destroy_log_bucket": {
    "default": false,
    "description": "If set to true and if the log bucket already exists, it will be destroyed and recreated."
  },
  "health_check_healthy_threshold": {
    "default": 3,
    "description": "Number of consecutive positive health checks before a backend instance is considered healthy."
  },
  "health_check_interval": {
    "default": 10,
    "description": "Interval in seconds on which the health check against backend hosts is tried."
  },
  "health_check_matcher": {
    "default": "200-299",
    "description": "The HTTP codes that are a success when checking TG health."
  },
  "health_check_path": {
    "description": "The URL the ELB should use for health checks. e.g. /health"
  },
  "health_check_port": {
    "default": "traffic-port",
    "description": "The port used by the health check if different from the traffic-port."
  },
  "health_check_timeout": {
    "default": 5,
    "description": "Seconds to leave a health check waiting before terminating it and calling the check unhealthy."
  },
  "health_check_unhealthy_threshold": {
    "default": 3,
    "description": "Number of consecutive positive health checks before a backend instance is considered unhealthy."
  },
  "log_bucket_name": {
    "default": "",
    "description": "S3 bucket for storing ALB access logs. To create the bucket \"create_log_bucket\" should be set to true."
  },
  "log_location_prefix": {
    "default": "",
    "description": "S3 prefix within the log_bucket_name under which logs are stored."
  },
  "region": {
    "description": "AWS region to use."
  },
  "security_policy": {
    "default": "ELBSecurityPolicy-2016-08",
    "description": "The security policy if using HTTPS externally on the ALB. See: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-security-policy-table.html"
  },
  "subnets": {
    "description": "A list of subnets to associate with the ALB. e.g. ['subnet-1a2b3c4d','subnet-1a2b3c4e','subnet-1a2b3c4f']",
    "type": "list"
  },
  "tags": {
    "default": {},
    "description": "A map of tags to add to all resources"
  },
  "vpc_id": {
    "description": "VPC id where the ALB and other resources will be deployed."
  }
}
