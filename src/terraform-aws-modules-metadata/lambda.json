{
  "allowed_triggers": {
    "default": {},
    "description": "Map of allowed triggers to create Lambda permissions",
    "type": "map(any)"
  },
  "artifacts_dir": {
    "default": "builds",
    "description": "Directory name where artifacts should be stored",
    "type": "string"
  },
  "attach_async_event_policy": {
    "default": false,
    "description": "Controls whether async event policy should be added to IAM role for Lambda Function",
    "type": "bool"
  },
  "attach_cloudwatch_logs_policy": {
    "default": true,
    "description": "Controls whether CloudWatch Logs policy should be added to IAM role for Lambda Function",
    "type": "bool"
  },
  "attach_dead_letter_policy": {
    "default": false,
    "description": "Controls whether SNS/SQS dead letter notification policy should be added to IAM role for Lambda Function",
    "type": "bool"
  },
  "attach_network_policy": {
    "default": false,
    "description": "Controls whether VPC/network policy should be added to IAM role for Lambda Function",
    "type": "bool"
  },
  "attach_policies": {
    "default": false,
    "description": "Controls whether list of policies should be added to IAM role for Lambda Function",
    "type": "bool"
  },
  "attach_policy": {
    "default": false,
    "description": "Controls whether policy should be added to IAM role for Lambda Function",
    "type": "bool"
  },
  "attach_policy_json": {
    "default": false,
    "description": "Controls whether policy_json should be added to IAM role for Lambda Function",
    "type": "bool"
  },
  "attach_policy_jsons": {
    "default": false,
    "description": "Controls whether policy_jsons should be added to IAM role for Lambda Function",
    "type": "bool"
  },
  "attach_policy_statements": {
    "default": false,
    "description": "Controls whether policy_statements should be added to IAM role for Lambda Function",
    "type": "bool"
  },
  "attach_tracing_policy": {
    "default": false,
    "description": "Controls whether X-Ray tracing policy should be added to IAM role for Lambda Function",
    "type": "bool"
  },
  "build_in_docker": {
    "default": false,
    "description": "Whether to build dependencies in Docker",
    "type": "bool"
  },
  "cloudwatch_logs_kms_key_id": {
    "default": "null",
    "description": "The ARN of the KMS Key to use when encrypting log data.",
    "type": "string"
  },
  "cloudwatch_logs_retention_in_days": {
    "default": "null",
    "description": "Specifies the number of days you want to retain log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.",
    "type": "number"
  },
  "cloudwatch_logs_tags": {
    "default": {},
    "description": "A map of tags to assign to the resource.",
    "type": "map(string)"
  },
  "compatible_runtimes": {
    "default": [],
    "description": "A list of Runtimes this layer is compatible with. Up to 5 runtimes can be specified.",
    "type": "list(string)"
  },
  "create": {
    "default": true,
    "description": "Controls whether resources should be created",
    "type": "bool"
  },
  "create_async_event_config": {
    "default": false,
    "description": "Controls whether async event configuration for Lambda Function/Alias should be created",
    "type": "bool"
  },
  "create_current_version_allowed_triggers": {
    "default": true,
    "description": "Whether to allow triggers on current version of Lambda Function (this will revoke permissions from previous version because Terraform manages only current resources)",
    "type": "bool"
  },
  "create_current_version_async_event_config": {
    "default": true,
    "description": "Whether to allow async event configuration on current version of Lambda Function (this will revoke permissions from previous version because Terraform manages only current resources)",
    "type": "bool"
  },
  "create_function": {
    "default": true,
    "description": "Controls whether Lambda Function resource should be created",
    "type": "bool"
  },
  "create_layer": {
    "default": false,
    "description": "Controls whether Lambda Layer resource should be created",
    "type": "bool"
  },
  "create_package": {
    "default": true,
    "description": "Controls whether Lambda package should be created",
    "type": "bool"
  },
  "create_role": {
    "default": true,
    "description": "Controls whether IAM role for Lambda Function should be created",
    "type": "bool"
  },
  "create_unqualified_alias_allowed_triggers": {
    "default": true,
    "description": "Whether to allow triggers on unqualified alias pointing to $LATEST version",
    "type": "bool"
  },
  "create_unqualified_alias_async_event_config": {
    "default": true,
    "description": "Whether to allow async event configuration on unqualified alias pointing to $LATEST version",
    "type": "bool"
  },
  "dead_letter_target_arn": {
    "default": "null",
    "description": "The ARN of an SNS topic or SQS queue to notify when an invocation fails.",
    "type": "string"
  },
  "description": {
    "default": "",
    "description": "Description of your Lambda Function (or Layer)",
    "type": "string"
  },
  "destination_on_failure": {
    "default": "null",
    "description": "Amazon Resource Name (ARN) of the destination resource for failed asynchronous invocations",
    "type": "string"
  },
  "destination_on_success": {
    "default": "null",
    "description": "Amazon Resource Name (ARN) of the destination resource for successful asynchronous invocations",
    "type": "string"
  },
  "docker_build_root": {
    "default": "",
    "description": "Root dir where to build in Docker",
    "type": "string"
  },
  "docker_file": {
    "default": "",
    "description": "Path to a Dockerfile when building in Docker",
    "type": "string"
  },
  "docker_image": {
    "default": "",
    "description": "Docker image to use for the build",
    "type": "string"
  },
  "docker_pip_cache": {
    "default": "null",
    "description": "Whether to mount a shared pip cache folder into docker environment or not",
    "type": "any"
  },
  "docker_with_ssh_agent": {
    "default": false,
    "description": "Whether to pass SSH_AUTH_SOCK into docker environment or not",
    "type": "bool"
  },
  "environment_variables": {
    "default": {},
    "description": "A map that defines environment variables for the Lambda Function.",
    "type": "map(string)"
  },
  "event_source_mapping": {
    "default": {},
    "description": "Map of event source mapping",
    "type": "any"
  },
  "file_system_arn": {
    "default": "null",
    "description": "The Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.",
    "type": "string"
  },
  "file_system_local_mount_path": {
    "default": "null",
    "description": "The path where the function can access the file system, starting with /mnt/.",
    "type": "string"
  },
  "function_name": {
    "default": "",
    "description": "A unique name for your Lambda Function",
    "type": "string"
  },
  "handler": {
    "default": "",
    "description": "Lambda Function entrypoint in your code",
    "type": "string"
  },
  "hash_extra": {
    "default": "",
    "description": "The string to add into hashing function. Useful when building same source path for different functions.",
    "type": "string"
  },
  "image_config_command": {
    "default": [],
    "description": "The CMD for the docker image",
    "type": "list(string)"
  },
  "image_config_entry_point": {
    "default": [],
    "description": "The ENTRYPOINT for the docker image",
    "type": "list(string)"
  },
  "image_config_working_directory": {
    "default": "null",
    "description": "The working directory for the docker image",
    "type": "string"
  },
  "image_uri": {
    "default": "null",
    "description": "The ECR image URI containing the function's deployment package.",
    "type": "string"
  },
  "kms_key_arn": {
    "default": "null",
    "description": "The ARN of KMS key to use by your Lambda Function",
    "type": "string"
  },
  "lambda_at_edge": {
    "default": false,
    "description": "Set this to true if using Lambda@Edge, to enable publishing, limit the timeout, and allow edgelambda.amazonaws.com to invoke the function",
    "type": "bool"
  },
  "lambda_role": {
    "default": "",
    "description": " IAM role ARN attached to the Lambda Function. This governs both who / what can invoke your Lambda Function, as well as what resources our Lambda Function has access to. See Lambda Permission Model for more details.",
    "type": "string"
  },
  "layer_name": {
    "default": "",
    "description": "Name of Lambda Layer to create",
    "type": "string"
  },
  "layers": {
    "default": "null",
    "description": "List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.",
    "type": "list(string)"
  },
  "license_info": {
    "default": "",
    "description": "License info for your Lambda Layer. Eg, MIT or full url of a license.",
    "type": "string"
  },
  "local_existing_package": {
    "default": "null",
    "description": "The absolute path to an existing zip-file to use",
    "type": "string"
  },
  "maximum_event_age_in_seconds": {
    "default": "null",
    "description": "Maximum age of a request that Lambda sends to a function for processing in seconds. Valid values between 60 and 21600.",
    "type": "number"
  },
  "maximum_retry_attempts": {
    "default": "null",
    "description": "Maximum number of times to retry when the function returns an error. Valid values between 0 and 2. Defaults to 2.",
    "type": "number"
  },
  "memory_size": {
    "default": 128,
    "description": "Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 64 MB increments.",
    "type": "number"
  },
  "number_of_policies": {
    "default": 0,
    "description": "Number of policies to attach to IAM role for Lambda Function",
    "type": "number"
  },
  "number_of_policy_jsons": {
    "default": 0,
    "description": "Number of policies JSON to attach to IAM role for Lambda Function",
    "type": "number"
  },
  "package_type": {
    "default": "Zip",
    "description": "The Lambda deployment package type. Valid options: Zip or Image",
    "type": "string"
  },
  "policies": {
    "default": [],
    "description": "List of policy statements ARN to attach to Lambda Function role",
    "type": "list(string)"
  },
  "policy": {
    "default": "null",
    "description": "An additional policy document ARN to attach to the Lambda Function role",
    "type": "string"
  },
  "policy_json": {
    "default": "null",
    "description": "An additional policy document as JSON to attach to the Lambda Function role",
    "type": "string"
  },
  "policy_jsons": {
    "default": [],
    "description": "List of additional policy documents as JSON to attach to Lambda Function role",
    "type": "list(string)"
  },
  "policy_statements": {
    "default": {},
    "description": "Map of dynamic policy statements to attach to Lambda Function role",
    "type": "any"
  },
  "provisioned_concurrent_executions": {
    "default": -1,
    "description": "Amount of capacity to allocate. Set to 1 or greater to enable, or set to 0 to disable provisioned concurrency.",
    "type": "number"
  },
  "publish": {
    "default": false,
    "description": "Whether to publish creation/change as new Lambda Function Version.",
    "type": "bool"
  },
  "reserved_concurrent_executions": {
    "default": -1,
    "description": "The amount of reserved concurrent executions for this Lambda Function. A value of 0 disables Lambda Function from being triggered and -1 removes any concurrency limitations. Defaults to Unreserved Concurrency Limits -1.",
    "type": "number"
  },
  "role_description": {
    "default": "null",
    "description": "Description of IAM role to use for Lambda Function",
    "type": "string"
  },
  "role_force_detach_policies": {
    "default": true,
    "description": "Specifies to force detaching any policies the IAM role has before destroying it.",
    "type": "bool"
  },
  "role_name": {
    "default": "null",
    "description": "Name of IAM role to use for Lambda Function",
    "type": "string"
  },
  "role_path": {
    "default": "null",
    "description": "Path of IAM role to use for Lambda Function",
    "type": "string"
  },
  "role_permissions_boundary": {
    "default": "null",
    "description": "The ARN of the policy that is used to set the permissions boundary for the IAM role used by Lambda Function",
    "type": "string"
  },
  "role_tags": {
    "default": {},
    "description": "A map of tags to assign to IAM role",
    "type": "map(string)"
  },
  "runtime": {
    "default": "",
    "description": "Lambda Function runtime",
    "type": "string"
  },
  "s3_acl": {
    "default": "private",
    "description": "The canned ACL to apply. Valid values are private, public-read, public-read-write, aws-exec-read, authenticated-read, bucket-owner-read, and bucket-owner-full-control. Defaults to private.",
    "type": "string"
  },
  "s3_bucket": {
    "default": "null",
    "description": "S3 bucket to store artifacts",
    "type": "string"
  },
  "s3_existing_package": {
    "default": "null",
    "description": "The S3 bucket object with keys bucket, key, version pointing to an existing zip-file to use",
    "type": "map(string)"
  },
  "s3_object_storage_class": {
    "default": "ONEZONE_IA",
    "description": "Specifies the desired Storage Class for the artifact uploaded to S3. Can be either STANDARD, REDUCED_REDUNDANCY, ONEZONE_IA, INTELLIGENT_TIERING, or STANDARD_IA.",
    "type": "string"
  },
  "s3_object_tags": {
    "default": {},
    "description": "A map of tags to assign to S3 bucket object.",
    "type": "map(string)"
  },
  "s3_server_side_encryption": {
    "default": "null",
    "description": "Specifies server-side encryption of the object in S3. Valid values are \"AES256\" and \"aws:kms\".",
    "type": "string"
  },
  "source_path": {
    "default": "null",
    "description": "The absolute path to a local file or directory containing your Lambda source code",
    "type": "any"
  },
  "store_on_s3": {
    "default": false,
    "description": "Whether to store produced artifacts on S3 or locally.",
    "type": "bool"
  },
  "tags": {
    "default": {},
    "description": "A map of tags to assign to resources.",
    "type": "map(string)"
  },
  "timeout": {
    "default": 3,
    "description": "The amount of time your Lambda Function has to run in seconds.",
    "type": "number"
  },
  "tracing_mode": {
    "default": "null",
    "description": "Tracing mode of the Lambda Function. Valid value can be either PassThrough or Active.",
    "type": "string"
  },
  "trusted_entities": {
    "default": [],
    "description": "List of additional trusted entities for assuming Lambda Function role (trust relationship)",
    "type": "any"
  },
  "use_existing_cloudwatch_log_group": {
    "default": false,
    "description": "Whether to use an existing CloudWatch log group or create new",
    "type": "bool"
  },
  "vpc_security_group_ids": {
    "default": "null",
    "description": "List of security group ids when Lambda Function should run in the VPC.",
    "type": "list(string)"
  },
  "vpc_subnet_ids": {
    "default": "null",
    "description": "List of subnet ids when Lambda Function should run in the VPC. Usually private or intra subnets.",
    "type": "list(string)"
  }
}
